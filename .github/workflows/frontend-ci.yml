name: Frontend CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Stap 1: Code uitchecken
      - uses: actions/checkout@v3  # Gebruik de nieuwste versie

      # Stap 2: Node.js instellen
      - name: Setup Node.js
        uses: actions/setup-node@v3  # Gebruik de nieuwste versie
        with:
          node-version: '20.17.0'  # Zorg ervoor dat dit overeenkomt met je Node.js versie

      # Stap 3: Dependencies installeren
      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend  # Zorg ervoor dat het pad klopt met je projectstructuur

      # Stap 4: Authenticate with Snyk
      - name: Authenticate with Snyk
        run: npx snyk auth ${{ secrets.SNYK_TOKEN }} 
        working-directory: ./frontend

      # Stap 5: Run Snyk Test 
      - name: Run Snyk Test
        run: npx snyk test  
        working-directory: ./frontend

      #Build the app
      - name: Build the project
        run: npm run build 
        working-directory: ./frontend
        
        
      # Stap 6: Start frontend server in de achtergrond
      - name: Start frontend server
        run:    nohup npm run dev &  # Start de ontwikkelserver op de achtergrond
        working-directory: ./frontend

    
      # Stap 7: Code linten
      # - name: Lint code
      #   run: npm run lint
      #   working-directory: ./frontend

      # Stap 8: Testen
      - name: Run tests
        run: npm test
        working-directory: ./frontend/tests

     # Stap 9: Run Cypress tests (in headless mode)
      - name: Run Cypress tests
        run: npx cypress run
        working-directory: ./frontend

     # Stap 10: Bouw de Docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
          registry: ghcr.io                    

      - name: Build Docker image
        run: |
         docker build --no-cache -t ghcr.io/${{ github.repository_owner }}/frontend-image:latest ./frontend
          
      # Push de Docker image naar de GitHub Container Registry
      - name: Push Docker image to GitHub Container Registry
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/frontend-image:latest
  
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        with:
                app-name: 'TaskManagementToolUI'
                publish-profile: ${{ secrets.AZURE_WEBAPP_UI_PUBLISH_PROFILE }} 
                images: 'ghcr.io/${{ github.repository_owner }}/frontend-image:latest'
                 
    
     # Stap 4: Build uitvoeren
      # - name: Run Build
      #   run: npm run build
      #   working-directory: ./frontend
     # Stap 9: Deploy naar Azure Web App (Gebruik publicatieprofiel als secret)
      # - name: Deploy to Azure Web App
      #   uses: azure/webapps-deploy@v2
      #   with:
      #       app-name: 'TaskManagerUI' 
      #       publish-profile: 
      #       package: ./frontend/dist
      