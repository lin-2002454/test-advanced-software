{
	"info": {
		"_postman_id": "8cbc3c14-08d1-4252-b184-26f9b15cc211",
		"name": "Task-service-Endpoints-tests",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23683285"
	},
	"item": [
		{
			"name": "Post task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test of de statuscode 201 is",
							"pm.test(\"Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test of de response de juiste velden bevat",
							"pm.test(\"Response bevat title, description, en completed\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"title\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"    pm.expect(jsonData).to.have.property(\"completed\");",
							"});",
							"",
							"// Test of de title en description correct zijn",
							"pm.test(\"Title en description zijn correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(\"Test Task 5\");",
							"    pm.expect(jsonData.description).to.eql(\"This is a test task\");",
							"});",
							"",
							"// Sla de taak-ID op in een environment-variabele",
							"pm.environment.set(\"task_id\", pm.response.json()._id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n{\n    \"title\": \"Test Task 5\",\n    \"description\": \"This is a test task\",\n    \"completed\": true\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Get tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test of de statuscode 200 is",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test of de response een array van taken is",
							"pm.test(\"Response is een array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"// Test of elke taak de juiste velden bevat",
							"pm.test(\"Elke taak bevat title, description, en completed\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task).to.have.property(\"title\");",
							"        pm.expect(task).to.have.property(\"description\");",
							"        pm.expect(task).to.have.property(\"completed\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test of de statuscode 200 is",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test of de response de juiste velden bevat na de update",
							"pm.test(\"Response bevat de juiste velden\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property(\"title\");",
							"    pm.expect(jsonData).to.have.property(\"description\");",
							"    pm.expect(jsonData).to.have.property(\"completed\");",
							"});",
							"",
							"// Test of de title en description zijn geÃ¼pdatet",
							"pm.test(\"Title en description zijn geÃ¼pdatet\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.title).to.eql(\"Updated Task\");",
							"    pm.expect(jsonData.description).to.eql(\"Updated description\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Updated Task\",\n    \"description\": \"Updated description\",\n    \"completed\": true\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test of de statuscode 200 is\r",
							"pm.test(\"Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test of de response de juiste taak bevat\r",
							"pm.test(\"Response bevat de taak met id \" + pm.environment.get(\"task_id\"), function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._id).to.eql(pm.environment.get(\"task_id\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test of de statuscode 200 is",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Test of de response het juiste bericht bevat",
							"pm.test(\"Response bevat 'Task deleted'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Task deleted\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get task/404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test van GET /tasks/:id met een niet-bestaande task_id\r",
							"pm.test(\"Status is 404 als taak niet gevonden wordt\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Bericht is 'Task not found'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Task not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/507f1f77bcf86cd799439011",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"507f1f77bcf86cd799439011"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update task/404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test van PUT /tasks/:id met een niet-bestaande task_id\r",
							"pm.test(\"Status is 404 als taak niet gevonden wordt\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Bericht is 'Task not found'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Task not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Updated Task\",\r\n    \"description\": \"Updated description\",\r\n    \"completed\": true\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/507f1f77bcf86cd799439011",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"507f1f77bcf86cd799439011"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete task/404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test van DELETE /tasks/:id met een niet-bestaande task_id\r",
							"pm.test(\"Status is 404 als taak niet gevonden wordt\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Bericht is 'Task not found'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"Task not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/tasks/507f1f77bcf86cd799439011",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"tasks",
						"507f1f77bcf86cd799439011"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}